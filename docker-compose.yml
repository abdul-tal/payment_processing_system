version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payment-backend-postgres
    environment:
      POSTGRES_DB: payment_backend
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user -d payment_backend"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - payment-network

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: payment-backend-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - payment-network

  # Payment Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: payment-backend-app
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    environment:
      NODE_ENV: production
      PORT: 3000
      METRICS_PORT: 9090
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_backend
      DB_USER: payment_user
      DB_PASSWORD: payment_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      
      # Authorize.Net Configuration (Sandbox)
      ANET_API_LOGIN_ID: ${ANET_API_LOGIN_ID:-your_sandbox_login_id}
      ANET_TRANSACTION_KEY: ${ANET_TRANSACTION_KEY:-your_sandbox_transaction_key}
      ANET_ENVIRONMENT: sandbox
      
      # Security Configuration
      API_SECRET_KEY: ${API_SECRET_KEY:-your-super-secret-api-key-change-in-production}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-your-webhook-secret-key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key-here}
      
      # Logging Configuration
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - app_logs:/app/logs
    networks:
      - payment-network
    restart: unless-stopped

  # Background Worker for Queue Processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: payment-backend-worker
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: production
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_backend
      DB_USER: payment_user
      DB_PASSWORD: payment_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      
      # Authorize.Net Configuration
      ANET_API_LOGIN_ID: ${ANET_API_LOGIN_ID:-your_sandbox_login_id}
      ANET_TRANSACTION_KEY: ${ANET_TRANSACTION_KEY:-your_sandbox_transaction_key}
      ANET_ENVIRONMENT: sandbox
      
      # Security Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key-here}
      
      # Logging Configuration
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - worker_logs:/app/logs
    networks:
      - payment-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: payment-backend-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - payment-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: payment-backend-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - payment-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: payment-backend-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - payment-network
    restart: unless-stopped

  # Database Migration Service (Run once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: payment-backend-migrate
    command: ["npm", "run", "migration:run"]
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_backend
      DB_USER: payment_user
      DB_PASSWORD: payment_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - payment-network
    profiles:
      - migration

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  worker_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  payment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
